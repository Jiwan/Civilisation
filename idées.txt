------------------------------------------------------------------------------------------------
Pattern state pour gérer les différentes phases du jeux.


------------------------------------------------------------------------------------------------
Faire un médiateur game qui gère :
- La bataille avec un pattern stratégie.
- La construction de villes. (Par exemple éviter la construction d'une ville sur une autre).

------------------------------------------------------------------------------------------------
De par sa vaillance et son abnégation, le directeur augmente de 50% les caractéristiques de défense et d’attaque des
unités combattantes se trouvant sur la même case (ce bonus n’affecte pas les caractéristiques
des directeurs).

==> Faire un singleton.

------------------------------------------------------------------------------------------------

1. modélisation des données du jeu (joueur, case, carte, unité, vue, etc.) à l’aide de différents
diagrammes de classes : 
	a. joueur - DONE
	b. case - (Inc. in VIEW)
	c. carte - WORLD
	d. unité, ville - CIVILIZATION
	e. vue - TO BE FINISHED
	f. etc

2. modélisation du comportement du jeu à l’aide de diagrammes d’interaction, d’états-transitions
(déroulement des combats, choix de la case de ville lors de l’agrandissement de la population,
fonctionnement d’un tour, etc.) ;
	a. diagrammes d’interaction - A FAIRE
	b. diagrammes d’états-transitions - A FAIRE
	
3. utilisation des patrons de conception suivants (cela est lié aux trois points précédents) :
	1. Fabrique abstraite, pour gérer les différentes civilisations. - DONE
	2. Monteur, pour la création d’une partie.
	3. Observateur, pour le lien entre le modèle et la vue.
	4. Poids-mouche et décorateur pour la modélisation de la carte. - DONE, DONE
	5. Stratégie, pour la création des différents types de carte. - DONE
	6. Il existe également de nombreux autres scénarios que vous pouvez développer (scénarios nominaux
ou bien gestion des erreurs notamment).